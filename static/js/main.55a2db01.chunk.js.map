{"version":3,"sources":["types/ErrorText.ts","api.tsx","features/comments.ts","app/store.ts","app/hooks.ts","components/Loader/Loader.tsx","components/Comment/Comment.tsx","components/CommentsList/CommentsList.tsx","components/TextArea/TextArea.tsx","App.tsx","index.tsx"],"names":["ErrorText","BASE_URL","wait","delay","Promise","resolve","setTimeout","getComments","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","wrap","_context","prev","next","concat","abrupt","axios","get","then","res","data","stop","apply","arguments","deleteComment","_ref2","_callee2","id","_context2","fetch","json","_x","addComment","_ref3","_callee3","comment","requestBody","_context3","body","postId","userId","post","_x2","initialState","comments","loading","error","NONE","init","createAsyncThunk","remove","add","commentsSlice","createSlice","name","reducers","set","state","action","_objectSpread","payload","setError","extraReducers","builder","addCase","pending","fulfilled","rejected","LOAD_COMMENTS","filter","message","match","DELETE_COMMENT","_toConsumableArray","ADD_COMMENT","actions","store","configureStore","reducer","useAppDispatch","useDispatch","useAppSelector","useSelector","Loader","_jsx","className","children","CircularProgress","sx","margin","Comment","user","dispatch","_jsxs","Typography","color","username","IconButton","onClick","commentActions","Close","titleAccess","variant","CommentsList","map","TextArea","_useState","useState","_useState2","_slicedToArray","commentBody","setCommentBody","_useState3","_useState4","isBodyTouched","setIsBodyTouched","helperBodyTitle","length","validator","isAscii","isValidateBody","postCommentOnServer","e","preventDefault","sent","useEffect","commentInStorage","localStorage","getItem","setItem","onSubmit","TextField","required","placeholder","multiline","rows","helperText","value","onChange","event","target","onFocus","Button","type","disabled","App","_useAppSelector","_Fragment","align","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Alert","severity","theme","createTheme","palette","primary","main","secondary","ReactDOM","render","Provider","React","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.55a2db01.chunk.js","sourcesContent":["export enum ErrorText {\n  LOAD_COMMENTS = 'Unable to load data. Try again later!',\n  ADD_COMMENT = 'Unable to add new comment. Try again later!',\n  DELETE_COMMENT = 'Unable to delete comment. Try again later!',\n  NONE = '',\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://dummyjson.com';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nexport const getComments = async () => {\n  await wait(500);\n\n  const url = `${BASE_URL}/comments`;\n\n  return axios.get(url).then(res => res.data);\n};\n\nexport const deleteComment = async (id: number) => {\n  await wait(500);\n\n  const url = `${BASE_URL}/comments/${id}`;\n\n  return fetch(url).then(res => res.json());\n};\n\nexport const addComment = async (comment: string) => {\n  await wait(500);\n\n  const url = `${BASE_URL}/comments/add`;\n\n  const requestBody = {\n    body: comment,\n    postId: 3,\n    userId: 5,\n  };\n\n  return axios.post(url, requestBody).then(res => res.data);\n};\n","import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport { CommentType } from '../types/CommentType';\nimport { ErrorText } from '../types/ErrorText';\nimport { getComments, deleteComment, addComment } from '../api';\n\ntype commentsStateType = {\n  comments: CommentType[],\n  loading: boolean,\n  error: ErrorText,\n};\n\nconst initialState: commentsStateType = {\n  comments: [],\n  loading: false,\n  error: ErrorText.NONE,\n};\n\nexport const init = createAsyncThunk('comments/fetch', () => getComments());\nexport const remove = createAsyncThunk('comments/fetchDelete', (id: number) => deleteComment(id));\nexport const add = createAsyncThunk('comments/fetchAdd', (comment: string) => addComment(comment));\n\nconst commentsSlice = createSlice({\n  name: 'comments',\n  initialState,\n  reducers: {\n    set: (state, action: PayloadAction<CommentType[]>) => {\n      return { ...state, comments: action.payload };\n    },\n    setError: (state, action: PayloadAction<ErrorText>) => {\n      return { ...state, error: action.payload };\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(init.pending, (state) => {\n      return ({ ...state, loading: true });\n    });\n\n    builder.addCase(init.fulfilled, (state, action) => {\n      return ({ ...state, comments: action.payload.comments, loading: false });\n    });\n\n    builder.addCase(init.rejected, (state) => {\n      return ({ ...state, error: ErrorText.LOAD_COMMENTS, loading: false });\n    });\n\n    builder.addCase(remove.pending, (state) => {\n      return ({ ...state, loading: true });\n    });\n\n    builder.addCase(remove.fulfilled, (state, action) => {\n      return ({\n        ...state,\n        loading: false,\n        comments: state.comments.filter(comment => (action.payload.id\n          ? comment.id !== action.payload.id\n          : comment.id !== +action.payload.message.match(/\\d+/)[0])),\n      });\n    });\n\n    builder.addCase(remove.rejected, (state) => {\n      return ({ ...state, error: ErrorText.DELETE_COMMENT, loading: false });\n    });\n\n    builder.addCase(add.pending, (state) => {\n      return ({ ...state, loading: true });\n    });\n\n    builder.addCase(add.fulfilled, (state, action) => {\n      return ({\n        ...state,\n        loading: false,\n        comments: [...state.comments, action.payload],\n      });\n    });\n\n    builder.addCase(add.rejected, (state) => {\n      return ({ ...state, error: ErrorText.ADD_COMMENT, loading: false });\n    });\n  },\n});\n\nexport default commentsSlice.reducer;\nexport const { actions } = commentsSlice;\n","import { configureStore } from '@reduxjs/toolkit';\nimport commentsSlice from '../features/comments';\n\nexport const store = configureStore({\n  reducer: {\n    comments: commentsSlice,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { CircularProgress } from '@mui/material';\nimport React from 'react';\nimport './Loader.scss';\n\ntype Props = {\n  card?: boolean,\n};\n\nexport const Loader: React.FC<Props> = () => (\n  <div className=\"loader\">\n    <CircularProgress\n      sx={{\n        margin: 'auto',\n      }}\n    />\n  </div>\n);\n","import React from 'react';\nimport { IconButton, Typography } from '@mui/material';\nimport { Close } from '@mui/icons-material';\nimport { CommentType } from '../../types/CommentType';\nimport { useAppDispatch } from '../../app/hooks';\nimport * as commentActions from '../../features/comments';\nimport './Comment.scss';\n\ntype Props = {\n  comment: CommentType;\n};\n\nexport const Comment: React.FC<Props> = ({ comment }) => {\n  const { id, user, body } = comment;\n  const dispatch = useAppDispatch();\n\n  const handleClickDelete = () => dispatch(commentActions.remove(id));\n\n  return (\n    <div className=\"comment\">\n      <div className=\"comment__header\">\n        <Typography className=\"comment__username\" color=\"text.secondary\">\n          {user.username}\n        </Typography>\n\n        <div className=\"comment__button\">\n          <IconButton onClick={handleClickDelete}>\n            <Close titleAccess=\"delete\" />\n          </IconButton>\n        </div>\n      </div>\n\n      <Typography variant=\"body2\">\n        {body}\n      </Typography>\n    </div>\n\n  );\n};\n","import React from 'react';\nimport { useAppSelector } from '../../app/hooks';\nimport { Comment } from '../Comment';\nimport './CommentsList.scss';\n\nexport const CommentsList = () => {\n  const { comments } = useAppSelector(state => state.comments);\n\n  return (\n    <div className=\"comments-list\">\n      {comments.map(comment => (\n        <Comment\n          key={comment.body}\n          comment={comment}\n        />\n      ))}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { TextField, Button } from '@mui/material';\nimport validator from 'validator';\nimport { useAppDispatch } from '../../app/hooks';\nimport * as commentActions from '../../features/comments';\nimport './TextArea.scss';\n\nexport const TextArea = () => {\n  const dispatch = useAppDispatch();\n  const [commentBody, setCommentBody] = useState('');\n  const [isBodyTouched, setIsBodyTouched] = useState(false);\n\n  const helperBodyTitle = () => {\n    if (!commentBody) {\n      return 'Body is required';\n    }\n\n    if (commentBody && commentBody.length < 10) {\n      return 'Comment body must be at least 10 characters long';\n    }\n\n    if (commentBody && !validator.isAscii(commentBody)) {\n      return 'Comment body can only contain ASCII characters';\n    }\n\n    return ' ';\n  };\n\n  const isValidateBody = helperBodyTitle() === ' ';\n\n  const handleCommentBody = (event: { target: { value: string; }; }) => {\n    setCommentBody(event.target.value as string);\n  };\n\n  const postCommentOnServer = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const response = await dispatch(commentActions.add(commentBody));\n\n    if (response.payload) {\n      setCommentBody('');\n    }\n  };\n\n  useEffect(() => {\n    const commentInStorage = localStorage.getItem('comment');\n\n    if (commentInStorage) {\n      setCommentBody(commentInStorage);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('comment', commentBody);\n  }, [commentBody]);\n\n  return (\n    <form\n      className=\"text-area\"\n      onSubmit={e => postCommentOnServer(e)}\n    >\n      <TextField\n        required\n        error={!isValidateBody && isBodyTouched}\n        id=\"outlined-error-helper-text\"\n        placeholder=\"Write your comment\"\n        multiline\n        rows={5}\n        helperText={isBodyTouched ? helperBodyTitle() : ' '}\n        value={commentBody}\n        onChange={handleCommentBody}\n        onFocus={() => setIsBodyTouched(true)}\n      />\n\n      <Button\n        type=\"submit\"\n        disabled={!isValidateBody}\n        variant=\"contained\"\n      >\n        Add comment\n      </Button>\n    </form>\n  );\n};\n","import React, { useEffect } from 'react';\nimport './App.scss';\nimport { Alert, Snackbar, Typography } from '@mui/material';\nimport { useAppSelector, useAppDispatch } from './app/hooks';\nimport * as commentActions from './features/comments';\nimport { Loader } from './components/Loader';\nimport { ErrorText } from './types/ErrorText';\nimport { CommentsList } from './components/CommentsList';\nimport { TextArea } from './components/TextArea';\n\nexport const App: React.FC = () => {\n  const { loading, error, comments } = useAppSelector(state => state.comments);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(commentActions.init());\n  }, []);\n\n  return (\n    <>\n      {loading && <Loader />}\n\n      <div className=\"app\">\n        <Typography variant=\"h2\" align=\"center\" color=\"primary\">\n          {comments.length === 0\n            ? 'No comments yet'\n            : 'Comments'}\n        </Typography>\n\n        <CommentsList />\n\n        <TextArea />\n      </div>\n\n      <Snackbar\n        open={error !== ErrorText.NONE}\n        autoHideDuration={5000}\n        onClose={() => dispatch(commentActions.actions.setError(ErrorText.NONE))}\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      >\n        <Alert severity=\"error\">\n          {error}\n        </Alert>\n      </Snackbar>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createTheme, ThemeProvider } from '@mui/material';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#FCDCE2',\n    },\n    secondary: {\n      main: '#FFFCFD',\n    },\n  },\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}