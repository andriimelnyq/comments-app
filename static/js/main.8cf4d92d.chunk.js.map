{"version":3,"sources":["types/ErrorText.ts","api.tsx","features/comments.ts","app/store.ts","app/hooks.ts","components/Loader/Loader.tsx","components/Comment/Comment.tsx","components/CommentsList/CommentsList.tsx","components/TextArea/TextArea.tsx","App.tsx","index.tsx"],"names":["ErrorText","BASE_URL","wait","delay","Promise","resolve","setTimeout","getComments","a","url","fetch","then","res","json","deleteComment","id","addComment","comment","method","headers","body","JSON","stringify","postId","userId","initialState","comments","loading","error","NONE","init","createAsyncThunk","remove","add","commentsSlice","createSlice","name","reducers","set","state","action","payload","setError","extraReducers","builder","addCase","pending","fulfilled","rejected","LOAD_COMMENTs","filter","message","match","DELETE_COMMENT","ADD_COMMENT","actions","store","configureStore","reducer","useAppDispatch","useDispatch","useAppSelector","useSelector","Loader","className","CircularProgress","sx","margin","Comment","user","dispatch","Typography","color","username","IconButton","onClick","commentActions","Close","titleAccess","variant","CommentsList","map","TextArea","useState","commentBody","setCommentBody","isBodyTouched","setIsBodyTouched","helperBodyTitle","length","validator","isAscii","isValidateBody","postCommentOnServer","e","preventDefault","useEffect","commentInStorage","localStorage","getItem","setItem","onSubmit","TextField","required","placeholder","multiline","rows","helperText","value","onChange","event","target","onFocus","Button","type","disabled","App","align","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Alert","severity","theme","createTheme","palette","primary","main","secondary","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.8cf4d92d.chunk.js","sourcesContent":["export enum ErrorText {\n  LOAD_COMMENTs = 'Unable to load data. Try again later!',\n  ADD_COMMENT = 'Unable to add new comment. Try again later!',\n  DELETE_COMMENT = 'Unable to delete comment. Try again later!',\n  NONE = '',\n}\n","const BASE_URL = 'https://dummyjson.com';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nexport const getComments = async () => {\n  await wait(500);\n\n  const url = `${BASE_URL}/comments`;\n\n  return fetch(url).then(res => res.json());\n};\n\nexport const deleteComment = async (id: number) => {\n  await wait(500);\n\n  const url = `${BASE_URL}/comments/${id}`;\n\n  return fetch(url).then(res => res.json());\n};\n\nexport const addComment = async (comment: string) => {\n  await wait(500);\n\n  const url = `${BASE_URL}/comments/add`;\n\n  return fetch(url, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      body: comment,\n      postId: 3,\n      userId: 5,\n    }),\n  }).then(res => res.json());\n};\n","import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport { CommentType } from '../types/CommentType';\nimport { ErrorText } from '../types/ErrorText';\nimport { getComments, deleteComment, addComment } from '../api';\n\ntype commentsStateType = {\n  comments: CommentType[],\n  loading: boolean,\n  error: ErrorText,\n};\n\nconst initialState: commentsStateType = {\n  comments: [],\n  loading: false,\n  error: ErrorText.NONE,\n};\n\nexport const init = createAsyncThunk('comments/fetch', () => getComments());\nexport const remove = createAsyncThunk('comments/fetchDelete', (id: number) => deleteComment(id));\nexport const add = createAsyncThunk('comments/fetchAdd', (comment: string) => addComment(comment));\n\nconst commentsSlice = createSlice({\n  name: 'comments',\n  initialState,\n  reducers: {\n    set: (state, action: PayloadAction<CommentType[]>) => {\n      return { ...state, comments: action.payload };\n    },\n    setError: (state, action: PayloadAction<ErrorText>) => {\n      return { ...state, error: action.payload };\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(init.pending, (state) => {\n      return ({ ...state, loading: true });\n    });\n\n    builder.addCase(init.fulfilled, (state, action) => {\n      return ({ ...state, comments: action.payload.comments, loading: false });\n    });\n\n    builder.addCase(init.rejected, (state) => {\n      return ({ ...state, error: ErrorText.LOAD_COMMENTs, loading: false });\n    });\n\n    builder.addCase(remove.pending, (state) => {\n      return ({ ...state, loading: true });\n    });\n\n    builder.addCase(remove.fulfilled, (state, action) => {\n      return ({\n        ...state,\n        loading: false,\n        comments: state.comments.filter(comment => (action.payload.id\n          ? comment.id !== action.payload.id\n          : comment.id !== +action.payload.message.match(/\\d+/)[0])),\n      });\n    });\n\n    builder.addCase(remove.rejected, (state) => {\n      return ({ ...state, error: ErrorText.DELETE_COMMENT, loading: false });\n    });\n\n    builder.addCase(add.pending, (state) => {\n      return ({ ...state, loading: true });\n    });\n\n    builder.addCase(add.fulfilled, (state, action) => {\n      return ({\n        ...state,\n        loading: false,\n        comments: [...state.comments, action.payload],\n      });\n    });\n\n    builder.addCase(add.rejected, (state) => {\n      return ({ ...state, error: ErrorText.ADD_COMMENT, loading: false });\n    });\n  },\n});\n\nexport default commentsSlice.reducer;\nexport const { actions } = commentsSlice;\n","import { configureStore } from '@reduxjs/toolkit';\nimport commentsSlice from '../features/comments';\n\nexport const store = configureStore({\n  reducer: {\n    comments: commentsSlice,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { CircularProgress } from '@mui/material';\nimport React from 'react';\nimport './Loader.scss';\n\ntype Props = {\n  card?: boolean,\n};\n\nexport const Loader: React.FC<Props> = () => (\n  <div className=\"loader\">\n    <CircularProgress\n      sx={{\n        margin: 'auto',\n      }}\n    />\n  </div>\n);\n","import React from 'react';\nimport { IconButton, Typography } from '@mui/material';\nimport { Close } from '@mui/icons-material';\nimport { CommentType } from '../../types/CommentType';\nimport { useAppDispatch } from '../../app/hooks';\nimport * as commentActions from '../../features/comments';\nimport './Comment.scss';\n\ntype Props = {\n  comment: CommentType;\n};\n\nexport const Comment: React.FC<Props> = ({ comment }) => {\n  const { id, user, body } = comment;\n  const dispatch = useAppDispatch();\n\n  const handleClickDelete = () => dispatch(commentActions.remove(id));\n\n  return (\n    <div className=\"comment\">\n      <div className=\"comment__header\">\n        <Typography className=\"comment__username\" color=\"text.secondary\">\n          {user.username}\n        </Typography>\n\n        <div className=\"comment__button\">\n          <IconButton onClick={handleClickDelete}>\n            <Close titleAccess=\"delete\" />\n          </IconButton>\n        </div>\n      </div>\n\n      <Typography variant=\"body2\">\n        {body}\n      </Typography>\n    </div>\n\n  );\n};\n","import React from 'react';\nimport { useAppSelector } from '../../app/hooks';\nimport { Comment } from '../Comment';\nimport './CommentsList.scss';\n\nexport const CommentsList = () => {\n  const { comments } = useAppSelector(state => state.comments);\n\n  return (\n    <div className=\"comments-list\">\n      {comments.map(comment => (\n        <Comment\n          key={comment.body}\n          comment={comment}\n        />\n      ))}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { TextField, Button } from '@mui/material';\nimport validator from 'validator';\nimport { useAppDispatch } from '../../app/hooks';\nimport * as commentActions from '../../features/comments';\nimport './TextArea.scss';\n\nexport const TextArea = () => {\n  const dispatch = useAppDispatch();\n  const [commentBody, setCommentBody] = useState('');\n  const [isBodyTouched, setIsBodyTouched] = useState(false);\n\n  const helperBodyTitle = () => {\n    if (!commentBody) {\n      return 'Body is required';\n    }\n\n    if (commentBody && commentBody.length < 10) {\n      return 'Comment body must be at least 10 characters long';\n    }\n\n    if (commentBody && !validator.isAscii(commentBody)) {\n      return 'Comment body can only contain ASCII characters';\n    }\n\n    return ' ';\n  };\n\n  const isValidateBody = helperBodyTitle() === ' ';\n\n  const handleCommentBody = (event: { target: { value: string; }; }) => {\n    setCommentBody(event.target.value as string);\n  };\n\n  const postCommentOnServer = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const response = await dispatch(commentActions.add(commentBody));\n\n    if (response.payload) {\n      setCommentBody('');\n    }\n  };\n\n  useEffect(() => {\n    const commentInStorage = localStorage.getItem('comment');\n\n    if (commentInStorage) {\n      setCommentBody(commentInStorage);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('comment', commentBody);\n  }, [commentBody]);\n\n  return (\n    <form\n      className=\"text-area\"\n      onSubmit={e => postCommentOnServer(e)}\n    >\n      <TextField\n        required\n        error={!isValidateBody && isBodyTouched}\n        id=\"outlined-error-helper-text\"\n        placeholder=\"Write your comment\"\n        multiline\n        rows={5}\n        helperText={isBodyTouched ? helperBodyTitle() : ' '}\n        value={commentBody}\n        onChange={handleCommentBody}\n        onFocus={() => setIsBodyTouched(true)}\n      />\n\n      <Button\n        type=\"submit\"\n        disabled={!isValidateBody}\n        variant=\"contained\"\n      >\n        Add comment\n      </Button>\n    </form>\n  );\n};\n","import React, { useEffect } from 'react';\nimport './App.scss';\nimport { Alert, Snackbar, Typography } from '@mui/material';\nimport { useAppSelector, useAppDispatch } from './app/hooks';\nimport * as commentActions from './features/comments';\nimport { Loader } from './components/Loader';\nimport { ErrorText } from './types/ErrorText';\nimport { CommentsList } from './components/CommentsList';\nimport { TextArea } from './components/TextArea';\n\nexport const App: React.FC = () => {\n  const { loading, error, comments } = useAppSelector(state => state.comments);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(commentActions.init());\n  }, []);\n\n  return (\n    <>\n      {loading && <Loader />}\n\n      <div className=\"app\">\n        <Typography variant=\"h2\" align=\"center\" color=\"primary\">\n          {comments.length === 0\n            ? 'No comments yet'\n            : 'All comments'}\n        </Typography>\n\n        <CommentsList />\n\n        <TextArea />\n      </div>\n\n      <Snackbar\n        open={error !== ErrorText.NONE}\n        autoHideDuration={5000}\n        onClose={() => dispatch(commentActions.actions.setError(ErrorText.NONE))}\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      >\n        <Alert severity=\"error\">\n          {error}\n        </Alert>\n      </Snackbar>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createTheme, ThemeProvider } from '@mui/material';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#FCDCE2',\n    },\n    secondary: {\n      main: '#FFFCFD',\n    },\n  },\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}